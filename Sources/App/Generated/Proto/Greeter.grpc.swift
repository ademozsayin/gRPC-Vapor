//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: Proto/Greeter.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Greeter_GreeterClient`, then call methods of this protocol to make API calls.
internal protocol Greeter_GreeterClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Greeter_GreeterClientInterceptorFactoryProtocol? { get }

  func sayHello(
    _ request: Greeter_HelloRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Greeter_HelloRequest, Greeter_HelloResponse>
}

extension Greeter_GreeterClientProtocol {
  internal var serviceName: String {
    return "greeter.Greeter"
  }

  /// Unary call to SayHello
  ///
  /// - Parameters:
  ///   - request: Request to send to SayHello.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sayHello(
    _ request: Greeter_HelloRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Greeter_HelloRequest, Greeter_HelloResponse> {
    return self.makeUnaryCall(
      path: Greeter_GreeterClientMetadata.Methods.sayHello.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSayHelloInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Greeter_GreeterClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Greeter_GreeterNIOClient")
internal final class Greeter_GreeterClient: Greeter_GreeterClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Greeter_GreeterClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Greeter_GreeterClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the greeter.Greeter service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Greeter_GreeterClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Greeter_GreeterNIOClient: Greeter_GreeterClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Greeter_GreeterClientInterceptorFactoryProtocol?

  /// Creates a client for the greeter.Greeter service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Greeter_GreeterClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Greeter_GreeterAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Greeter_GreeterClientInterceptorFactoryProtocol? { get }

  func makeSayHelloCall(
    _ request: Greeter_HelloRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Greeter_HelloRequest, Greeter_HelloResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Greeter_GreeterAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Greeter_GreeterClientMetadata.serviceDescriptor
  }

  internal var interceptors: Greeter_GreeterClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeSayHelloCall(
    _ request: Greeter_HelloRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Greeter_HelloRequest, Greeter_HelloResponse> {
    return self.makeAsyncUnaryCall(
      path: Greeter_GreeterClientMetadata.Methods.sayHello.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSayHelloInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Greeter_GreeterAsyncClientProtocol {
  internal func sayHello(
    _ request: Greeter_HelloRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Greeter_HelloResponse {
    return try await self.performAsyncUnaryCall(
      path: Greeter_GreeterClientMetadata.Methods.sayHello.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSayHelloInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Greeter_GreeterAsyncClient: Greeter_GreeterAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Greeter_GreeterClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Greeter_GreeterClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Greeter_GreeterClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'sayHello'.
  func makeSayHelloInterceptors() -> [ClientInterceptor<Greeter_HelloRequest, Greeter_HelloResponse>]
}

internal enum Greeter_GreeterClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Greeter",
    fullName: "greeter.Greeter",
    methods: [
      Greeter_GreeterClientMetadata.Methods.sayHello,
    ]
  )

  internal enum Methods {
    internal static let sayHello = GRPCMethodDescriptor(
      name: "SayHello",
      path: "/greeter.Greeter/SayHello",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Greeter_GreeterProvider: CallHandlerProvider {
  var interceptors: Greeter_GreeterServerInterceptorFactoryProtocol? { get }

  func sayHello(request: Greeter_HelloRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Greeter_HelloResponse>
}

extension Greeter_GreeterProvider {
  internal var serviceName: Substring {
    return Greeter_GreeterServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "SayHello":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Greeter_HelloRequest>(),
        responseSerializer: ProtobufSerializer<Greeter_HelloResponse>(),
        interceptors: self.interceptors?.makeSayHelloInterceptors() ?? [],
        userFunction: self.sayHello(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Greeter_GreeterAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Greeter_GreeterServerInterceptorFactoryProtocol? { get }

  func sayHello(
    request: Greeter_HelloRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Greeter_HelloResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Greeter_GreeterAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Greeter_GreeterServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Greeter_GreeterServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Greeter_GreeterServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "SayHello":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Greeter_HelloRequest>(),
        responseSerializer: ProtobufSerializer<Greeter_HelloResponse>(),
        interceptors: self.interceptors?.makeSayHelloInterceptors() ?? [],
        wrapping: { try await self.sayHello(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol Greeter_GreeterServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'sayHello'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSayHelloInterceptors() -> [ServerInterceptor<Greeter_HelloRequest, Greeter_HelloResponse>]
}

internal enum Greeter_GreeterServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Greeter",
    fullName: "greeter.Greeter",
    methods: [
      Greeter_GreeterServerMetadata.Methods.sayHello,
    ]
  )

  internal enum Methods {
    internal static let sayHello = GRPCMethodDescriptor(
      name: "SayHello",
      path: "/greeter.Greeter/SayHello",
      type: GRPCCallType.unary
    )
  }
}
